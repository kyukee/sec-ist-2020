//
// Protocol buffers definition for the Public Announcement Service
//
syntax = "proto3";
package pt.ulisboa.tecnico.meic.sec.pas.grpc;

// ********** ping() **********

message PingRequest {
  string message = 1;
}

message PingReply {
  string message = 1;
}

// ********** register() **********

message RegisterRequest {
  // encrypted message: create a RegisterMessage > convert to byte[] > encrypt with AES key
  // encrypted AES key: encrypt with client private RSA key > server public RSA key

  bytes encryptedMessage = 1;
  bytes encryptedAESKey = 2;
  bytes publicKeyBytes = 3;
}

message RegisterResponse {
	int32 status = 1;
}

message RegisterMessage {
  message Data {
    string name = 1;
    string password = 2;
    int64 epoch = 3;
  }

  Data data = 1;
	bytes signature = 2;
}

// ********** post() **********

message PostRequest {
  bytes encryptedMessage = 1;
  bytes encryptedAESKey = 2;
  bytes publicKeyBytes = 3;
}

message PostResponse {
	int32 status = 1;
}

message PostMessage {
  message Data {
    string message = 1;
    repeated int64 references = 2;
    int64 epoch = 3;
    string password = 4;
  }

  Data data = 1;
	bytes signature = 2;
}

// ********** read() **********

message ReadRequest {
  bytes encryptedMessage = 1;
  bytes encryptedAESKey = 2;
  bytes publicKeyBytes = 3;
}

message ReadResponse {
	repeated Announcement posts = 1;
}

message ReadMessage {
  message Data {
    int32 number = 1;
  }

  Data data = 1;
	bytes signature = 2;
}

// ********** readGeneral() **********

message ReadGeneralRequest {
  bytes encryptedMessage = 1;
  bytes encryptedAESKey = 2;
}

message ReadGeneralResponse {
	repeated Announcement posts = 1;
}

message ReadGeneralMessage {
  message Data {
    int32 number = 1;
  }

  Data data = 1;
	bytes signature = 2;
}

// ********** dto **********

message Announcement {
  string message = 1;
  repeated int64 references = 2;
  int64 epoch = 3;
  int64 _userId = 4;
  int64 _id = 5;
}


service PasService {
  rpc ping(PingRequest) returns (PingReply);
  rpc register(RegisterRequest) returns (RegisterResponse);
  rpc post(PostRequest) returns (PostResponse);
  rpc read(ReadRequest) returns (ReadResponse);
  rpc readGeneral(ReadGeneralRequest) returns (ReadGeneralResponse);
}
